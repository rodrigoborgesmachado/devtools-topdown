using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Util;

namespace Regras
{
    /// <summary>
    /// Classe que define os métodos para copiar os arquivos util
    /// </summary>
    public static class UtilHelper
    {

        /// <summary>
        /// Método que gera os arquivos UTIL
        /// </summary>
        /// <returns>True - sucesso; False - erro</returns>
        public static bool GerarArquivos(Util.Enumerator.ArquivosGerados arquivosGerados, DirectoryInfo info)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.GerarArquivos()", Util.Global.TipoLog.DETALHADO);

            try
            {

                if(arquivosGerados == Enumerator.ArquivosGerados.UTIL)
                {
                    GerarUtil(info);
                }
                else
                {
                    GeraModel(info);
                }
                
            }
            catch(Exception e)
            {
                Util.CL_Files.WriteOnTheLog("Erro: " + e.Message, Global.TipoLog.SIMPLES);
                return false;
            }

            return true;
        }

        #region Model

        /// <summary>
        /// Método que gera os arquivos model
        /// </summary>
        /// <param name="info">diretorio onde copiar os arquivos</param>
        private static void GeraModel(DirectoryInfo info)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.GeraModel()", Util.Global.TipoLog.DETALHADO);

            StringBuilder modelMDNModel = new StringBuilder();
            PreencheMDNModel(ref modelMDNModel);

            StringBuilder modelMDNTable = new StringBuilder();
            PreencheMDNTable(ref modelMDNTable);

            StringBuilder modelMDNCampo = new StringBuilder();
            PreencheMDNCampo(ref modelMDNCampo);

            PreencheNoArquivo(info.FullName, modelMDNModel, modelMDNTable, modelMDNCampo);

        }

        /// <summary>
        /// Método que preenche os arquivo
        /// </summary>
        /// <param name="CLFiles">string da classe cl_file</param>
        /// <param name="Enumerator">string da classe enumerator</param>
        /// <param name="DataBase">string da classe database</param>
        private static void PreencheNoArquivo(string dir, StringBuilder MDNModel, StringBuilder MDNTable, StringBuilder MDNCampo)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.PreencheNoArquivo()", Util.Global.TipoLog.DETALHADO);

            File.AppendAllText(dir + "\\" + Util.Global.app_claseMDNModel_file, MDNModel.ToString());

            File.AppendAllText(dir + "\\" + Util.Global.app_claseMDNTable_file, MDNTable.ToString());

            File.AppendAllText(dir + "\\" + Util.Global.app_claseMDNCampo_file, MDNCampo.ToString());
        }

        /// <summary>
        /// Método que gera o arquivo MDN_CAMPO
        /// </summary>
        /// <param name="builder">string para montar a classe</param>
        private static void PreencheMDNCampo(ref StringBuilder builder)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.PreencheMDNCampo()", Util.Global.TipoLog.DETALHADO);

            builder.AppendLine("using System;");
            builder.AppendLine("using System.Collections.Generic;");
            builder.AppendLine("using System.Linq;");
            builder.AppendLine("using System.Text;");
            builder.AppendLine("using System.Threading.Tasks;");
            builder.AppendLine("using static Util.Enumerator;");
            builder.AppendLine("");
            builder.AppendLine("namespace Model");
            builder.AppendLine("{");
            builder.AppendLine("    public class MDN_Campo");
            builder.AppendLine("    {");
            builder.AppendLine("        #region Atributes");
            builder.AppendLine("");
            builder.AppendLine("        private string name_field;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Filed's name");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public string Name_Field");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return name_field;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        private bool notnull = false;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Verify if the field is notnull or nullnable");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public bool NotNull");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return this.notnull;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        DataType type;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Field's data type");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public DataType Type");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return type;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        object valueDefault = null;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Field's default value");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public object ValueDefault");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return this.valueDefault;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        bool primaryKey = false;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Verify if the field is a primary key");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public bool PrimaryKey");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return primaryKey;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        bool unique = false;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Verify if the fiel is a unique value");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public bool Unique");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return unique;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        int size = 0;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Field's size");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public int Size");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return this.size;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        int precision = 0;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Field's precision");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public int Precision");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return this.precision;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        #endregion Atributes");
            builder.AppendLine("");
            builder.AppendLine("        #region Construtores");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Class's main constructor");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"field_name\">Field's</param>");
            builder.AppendLine("        /// <param name=\"notnull\">Verify if the fiel is notnull</param>");
            builder.AppendLine("        /// <param name=\"type\">Field's type</param>");
            builder.AppendLine("        /// <param name=\"default_value\">Field's default value</param>");
            builder.AppendLine("        /// <param name=\"primary\">Verify if the fiel is a primary key</param>");
            builder.AppendLine("        /// <param name=\"unique\">Verify if the fiel is a unique value</param>");
            builder.AppendLine("        /// <param name=\"size\">Field's size</param>");
            builder.AppendLine("        /// <param name=\"precision\">Field's precision </param>");
            builder.AppendLine("        public MDN_Campo(string field_name, bool notnull, DataType type, object default_value, bool primary, bool unique, int size, int precision)");
            builder.AppendLine("        {");
            builder.AppendLine("            this.name_field = field_name.ToUpper();");
            builder.AppendLine("            this.notnull = notnull;");
            builder.AppendLine("            this.type = type;");
            builder.AppendLine("            this.valueDefault = default_value;");
            builder.AppendLine("            this.primaryKey = primary;");
            builder.AppendLine("            this.unique = unique;");
            builder.AppendLine("            this.size = size;");
            builder.AppendLine("            this.precision = precision;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        #endregion Construtores");
            builder.AppendLine("");
            builder.AppendLine("        #region Methods");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that create a command of the creation field type");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>Command of inserction of the field on database</returns>");
            builder.AppendLine("        public string InsertFieldDataBase()");
            builder.AppendLine("        {");
            builder.AppendLine("            string command_sql = this.name_field + \" \";");
            builder.AppendLine("            switch (this.type)");
            builder.AppendLine("            {");
            builder.AppendLine("                case DataType.CHAR:");
            builder.AppendLine("                    command_sql += \" CHAR(\" + this.size + \") \";");
            builder.AppendLine("                    command_sql += (notnull ? \" DEFAULT '\" + (this.ValueDefault == null ? \"\" : this.ValueDefault.ToString()) + \"' NOT NULL \" : (unique ? \" UNIQUE \" : string.Empty));");
            builder.AppendLine("                    break;");
            builder.AppendLine("                case DataType.DATE:");
            builder.AppendLine("                    command_sql += \" INTEGER \";");
            builder.AppendLine("                    command_sql += (notnull ? \" DEFAULT \" + Util.DataBase.Date_to_Int(DateTime.Parse((this.ValueDefault == null ? 0.ToString() : this.ValueDefault.ToString()))) + \" NOT NULL \" : (unique ? \"UNIQUE\" : string.Empty));");
            builder.AppendLine("                    break;");
            builder.AppendLine("                case DataType.DECIMAL:");
            builder.AppendLine("                    command_sql += \" DECIMAL(\" + this.size + \",\" + precision + \") \";");
            builder.AppendLine("                    command_sql += (notnull ? \" DEFAULT \" + decimal.Parse((this.ValueDefault == null ? 0.ToString() : this.ValueDefault.ToString())) + \" NOT NULL \" : (unique ? \" UNIQUE \" : string.Empty));");
            builder.AppendLine("                    break;");
            builder.AppendLine("                case DataType.INT:");
            builder.AppendLine("                    command_sql += \" INTEGER \";");
            builder.AppendLine("                    command_sql += (notnull ? \" DEFAULT \" + int.Parse((this.ValueDefault == null ? 0.ToString() : this.ValueDefault.ToString())) + \" NOT NULL \" : (unique ? \" UNIQUE \" : string.Empty));");
            builder.AppendLine("                    break;");
            builder.AppendLine("                case DataType.STRING:");
            builder.AppendLine("                    command_sql += \" VARCHAR(\" + this.size + \") \";");
            builder.AppendLine("                    command_sql += (notnull ? \" DEFAULT '\" + (this.ValueDefault == null ? string.Empty : this.ValueDefault.ToString()) + \"' NOT NULL \" : (unique ? \" UNIQUE \" : string.Empty));");
            builder.AppendLine("                    break;");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            return command_sql;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        #endregion Methods");
            builder.AppendLine("    }");
            builder.AppendLine("}");

        }

        /// <summary>
        /// Método que Preenche a partir da classe do núcleo do modelo
        /// </summary>
        /// <param name="builder">string para montar a classe</param>
        private static void PreencheMDNTable(ref StringBuilder builder)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.PreencheMDNTable()", Util.Global.TipoLog.DETALHADO);

            builder.AppendLine("using System;");
            builder.AppendLine("using System.Collections.Generic;");
            builder.AppendLine("using System.Data;");
            builder.AppendLine("using System.Data.SQLite;");
            builder.AppendLine("using System.Linq;");
            builder.AppendLine("using System.Text;");
            builder.AppendLine("using System.Threading.Tasks;");
            builder.AppendLine("");
            builder.AppendLine("namespace Model");
            builder.AppendLine("{");
            builder.AppendLine("    public class MDN_Table");
            builder.AppendLine("    {");
            builder.AppendLine("        #region Atributes");
            builder.AppendLine("");
            builder.AppendLine("        string table_name;");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Table's name");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public string Table_Name");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return table_name;");
            builder.AppendLine("            }");
            builder.AppendLine("            set");
            builder.AppendLine("            {");
            builder.AppendLine("                this.table_name = value;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        List<MDN_Campo> fields_Table = new List<MDN_Campo>();");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// List of the table's fields");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public List<MDN_Campo> Fields_Table");
            builder.AppendLine("        {");
            builder.AppendLine("            set");
            builder.AppendLine("            {");
            builder.AppendLine("                this.fields_Table = value;");
            builder.AppendLine("            }");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return this.fields_Table;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        int level = 0;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Table's Relationship level (the greater more idependent the table be)");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public int Level");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return level;");
            builder.AppendLine("            }");
            builder.AppendLine("            set");
            builder.AppendLine("            {");
            builder.AppendLine("                this.level = value;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Data table to representes the table on the data base");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        DataTable data_table = new DataTable();");
            builder.AppendLine("");
            builder.AppendLine("        #endregion Atributes");
            builder.AppendLine("");
            builder.AppendLine("        #region Construtores");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Construtor principal da classe");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"name\"></param>");
            builder.AppendLine("        /// <param name=\"lista\"></param>");
            builder.AppendLine("        /// <param name=\"nivel\"></param>");
            builder.AppendLine("        public MDN_Table(string name)");
            builder.AppendLine("        {");
            builder.AppendLine("            this.table_name = name;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        #endregion Construtores");
            builder.AppendLine("");
            builder.AppendLine("        #region Methods ");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that make the creation of the table");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"delete\">Identify if delete the values on the table if it exists</param>");
            builder.AppendLine("        /// <param name=\"num_lines\">Number of lines to be fill on the table if 'fill' is true</param>");
            builder.AppendLine("        public void CreateTable(bool delete)");
            builder.AppendLine("        {");
            builder.AppendLine("            if (delete) this.DeleteTable();");
            builder.AppendLine("");
            builder.AppendLine("            if (!ExistsTable())");
            builder.AppendLine("            {");
            builder.AppendLine("                string command = \"CREATE TABLE \" + this.Table_Name + \" (\";");
            builder.AppendLine("                int qt = fields_Table.Count, i = 0;");
            builder.AppendLine("                foreach (MDN_Campo field in fields_Table)");
            builder.AppendLine("                {");
            builder.AppendLine("                    i++;");
            builder.AppendLine("                    command += field.InsertFieldDataBase() + (i != qt ? \", \" : \"\");");
            builder.AppendLine("                }");
            builder.AppendLine("");
            builder.AppendLine("                string primary = CreateCommandPrimaryKey();");
            builder.AppendLine("                if (!string.IsNullOrEmpty(primary))");
            builder.AppendLine("                    command += \", \" + primary;");
            builder.AppendLine("");
            builder.AppendLine("                command += \")\";");
            builder.AppendLine("");
            builder.AppendLine("                Util.DataBase.CreateTable(command);");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            data_table.Clear();");
            builder.AppendLine("            foreach (MDN_Campo field in fields_Table)");
            builder.AppendLine("            {");
            builder.AppendLine("                data_table.Columns.Add(new DataColumn(field.Name_Field));");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            if (!Table_Name.Equals(\"TABELAS\"))");
            builder.AppendLine("            {");
            builder.AppendLine("                FillLib();");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that create the dictionary of the table");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public void FillLib()");
            builder.AppendLine("        {");
            builder.AppendLine("            MDN_Table table = new MDN_Table(\"TABELAS\");");
            builder.AppendLine("            table.Fields_Table.Add(new MDN_Campo(\"TAB\", true, Util.Enumerator.DataType.STRING, null, true, true, 40, 0));");
            builder.AppendLine("            table.Fields_Table.Add(new MDN_Campo(\"FIELD\", true, Util.Enumerator.DataType.STRING, null, true, true, 25, 0));");
            builder.AppendLine("            table.Fields_Table.Add(new MDN_Campo(\"TYPE\", true, Util.Enumerator.DataType.CHAR, null, true, true, 1, 0));");
            builder.AppendLine("            table.Fields_Table.Add(new MDN_Campo(\"SIZE\", true, Util.Enumerator.DataType.INT, null, true, true, 1, 0));");
            builder.AppendLine("            table.Fields_Table.Add(new MDN_Campo(\"PREC\", true, Util.Enumerator.DataType.INT, null, true, true, 1, 0));");
            builder.AppendLine("            table.Fields_Table.Add(new MDN_Campo(\"FLAG\", true, Util.Enumerator.DataType.INT, null, true, true, 1, 0));");
            builder.AppendLine("            if (!table.ExistsTable())");
            builder.AppendLine("                table.CreateTable(false);");
            builder.AppendLine("            table.VerificaColunas();");
            builder.AppendLine("");
            builder.AppendLine("            string insert_base = \"INSERT INTO TABELAS (tab,field,type,size,prec,flags) VALUES (\";");
            builder.AppendLine("            int i = fields_Table.Count;");
            builder.AppendLine("");
            builder.AppendLine("            foreach (MDN_Campo field in fields_Table)");
            builder.AppendLine("            {");
            builder.AppendLine("                string insert = insert_base + \"'\" + this.Table_Name + \"'\";");
            builder.AppendLine("                insert += \", '\" + field.Name_Field + \"'\";");
            builder.AppendLine("                switch (field.Type)");
            builder.AppendLine("                {");
            builder.AppendLine("                    case Util.Enumerator.DataType.CHAR:");
            builder.AppendLine("                        insert += \",'C'\";");
            builder.AppendLine("                        break;");
            builder.AppendLine("                    case Util.Enumerator.DataType.STRING:");
            builder.AppendLine("                        insert += \",'C'\";");
            builder.AppendLine("                        break;");
            builder.AppendLine("                    case Util.Enumerator.DataType.DATE:");
            builder.AppendLine("                        insert += \",'T'\";");
            builder.AppendLine("                        break;");
            builder.AppendLine("                    case Util.Enumerator.DataType.DECIMAL:");
            builder.AppendLine("                        insert += \",'F'\";");
            builder.AppendLine("                        break;");
            builder.AppendLine("                    case Util.Enumerator.DataType.INT:");
            builder.AppendLine("                        insert += \",'I'\";");
            builder.AppendLine("                        break;");
            builder.AppendLine("                }");
            builder.AppendLine("                insert += \",\" + field.Size;");
            builder.AppendLine("                insert += \",\" + field.Precision;");
            builder.AppendLine("                insert += \",0)\";");
            builder.AppendLine("");
            builder.AppendLine("                Util.DataBase.Insert(insert);");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method how creates the command of primary key. Is usefull when the system is creating the database");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>Command</returns>");
            builder.AppendLine("        private string CreateCommandPrimaryKey()");
            builder.AppendLine("        {");
            builder.AppendLine("            string command_sql = string.Empty;");
            builder.AppendLine("            int qt = 0;");
            builder.AppendLine("");
            builder.AppendLine("            foreach (MDN_Campo field in fields_Table)");
            builder.AppendLine("            {");
            builder.AppendLine("                if (field.PrimaryKey)");
            builder.AppendLine("                {");
            builder.AppendLine("                    if (qt == 0)");
            builder.AppendLine("                        command_sql = \" PRIMARY KEY ( \";");
            builder.AppendLine("                    else");
            builder.AppendLine("                        command_sql += \", \";");
            builder.AppendLine("");
            builder.AppendLine("                    command_sql += field.Name_Field + \" \";");
            builder.AppendLine("                    qt++;");
            builder.AppendLine("                }");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            if (!string.IsNullOrEmpty(command_sql))");
            builder.AppendLine("                command_sql += \" )\";");
            builder.AppendLine("");
            builder.AppendLine("            return command_sql;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method how make the DELETE on the database");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>true - Sucess; false - Error</returns>");
            builder.AppendLine("        public bool DeleteTable()");
            builder.AppendLine("        {");
            builder.AppendLine("            if (ExistsTable())");
            builder.AppendLine("            {");
            builder.AppendLine("                string command = \"DROP TABLE \" + this.table_name;");
            builder.AppendLine("                return Util.DataBase.Execute(command);");
            builder.AppendLine("            }");
            builder.AppendLine("            return true;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that verify if the table on the database is equal if the data table on the system");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"database_directory\">Disrectory of the database</param>");
            builder.AppendLine("        /// <returns>True - correct; False - error</returns>");
            builder.AppendLine("        public bool CheckDataBaseWithDataTable(string database_directory)");
            builder.AppendLine("        {");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                Util.DataBase.CloseConnection();");
            builder.AppendLine("                if (Util.DataBase.OpenConnection(database_directory))");
            builder.AppendLine("                {");
            builder.AppendLine("                    bool were_error = false;");
            builder.AppendLine("                    string command = CreateCommandSQLTable();");
            builder.AppendLine("                    SQLiteDataReader reader = Util.DataBase.Select(command);");
            builder.AppendLine("                    DataTable table = new DataTable();");
            builder.AppendLine("");
            builder.AppendLine("                    // Verify if all colluns were created on the database");
            builder.AppendLine("                    foreach (DataColumn collumn in data_table.Columns)");
            builder.AppendLine("                    {");
            builder.AppendLine("                        string field = collumn.ColumnName;");
            builder.AppendLine("                        int i = 0;");
            builder.AppendLine("                        bool match = false;");
            builder.AppendLine("                        for (i = 0; i < fields_Table.Count && !match; i++)");
            builder.AppendLine("                        {");
            builder.AppendLine("                            if (reader.GetName(i).ToUpper().Equals(field.ToUpper()))");
            builder.AppendLine("                            {");
            builder.AppendLine("                                table.Columns.Add(field);");
            builder.AppendLine("                                match = true;");
            builder.AppendLine("                            }");
            builder.AppendLine("                        }");
            builder.AppendLine("");
            builder.AppendLine("                        if (!match)");
            builder.AppendLine("                        {");
            builder.AppendLine("                            were_error = true;");
            builder.AppendLine("                        }");
            builder.AppendLine("                    }");
            builder.AppendLine("");
            builder.AppendLine("                    List<string> list = new List<string>();");
            builder.AppendLine("                    while (reader.Read())");
            builder.AppendLine("                    {");
            builder.AppendLine("                        list = new List<string>();");
            builder.AppendLine("                        foreach (DataColumn collumn in data_table.Columns)");
            builder.AppendLine("                        {");
            builder.AppendLine("                            list.Add(reader[collumn.ColumnName].ToString());");
            builder.AppendLine("                        }");
            builder.AppendLine("                        table.Rows.Add(list.ToArray());");
            builder.AppendLine("                    }");
            builder.AppendLine("                    reader.Close();");
            builder.AppendLine("");
            builder.AppendLine("                    for (int i = 0; i < data_table.Rows.Count; i++)");
            builder.AppendLine("                    {");
            builder.AppendLine("                        List<object> l1 = data_table.Rows[i].ItemArray.ToList();");
            builder.AppendLine("                        List<object> l2 = table.Rows[i].ItemArray.ToList();");
            builder.AppendLine("");
            builder.AppendLine("                        if (l1.Count != l2.Count)");
            builder.AppendLine("                        {");
            builder.AppendLine("                            were_error = true;");
            builder.AppendLine("                            break;");
            builder.AppendLine("                        }");
            builder.AppendLine("");
            builder.AppendLine("                        for (int j = 0; j < l1.Count; j++)");
            builder.AppendLine("                        {");
            builder.AppendLine("                            if (l1[j].ToString().Replace(',', '.') != l2[j].ToString().Replace(',', '.'))");
            builder.AppendLine("                            {");
            builder.AppendLine("                                were_error = true;");
            builder.AppendLine("                                break;");
            builder.AppendLine("                            }");
            builder.AppendLine("                        }");
            builder.AppendLine("                        if (were_error)");
            builder.AppendLine("                            break;");
            builder.AppendLine("                    }");
            builder.AppendLine("");
            builder.AppendLine("                    if (were_error)");
            builder.AppendLine("                    {");
            builder.AppendLine("                        Util.CL_Files.WriteOnTheLog(\"[TESTE_ZFX_2]The new database don't mach!\", Util.Global.TipoLog.SIMPLES);");
            builder.AppendLine("                        return false;");
            builder.AppendLine("                    }");
            builder.AppendLine("                    else");
            builder.AppendLine("                    {");
            builder.AppendLine("                        return true;");
            builder.AppendLine("                    }");
            builder.AppendLine("                }");
            builder.AppendLine("");
            builder.AppendLine("                return true;");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                Util.CL_Files.WriteOnTheLog(\"[TESTE_ZFX_2]Error comparing datatable.Error: \" + e.Message, Util.Global.TipoLog.SIMPLES);");
            builder.AppendLine("            }");
            builder.AppendLine("            return false;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that creates the command for select in table");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>Command SQL</returns>");
            builder.AppendLine("        public string CreateCommandSQLTable()");
            builder.AppendLine("        {");
            builder.AppendLine("            string command = \" SELECT \";");
            builder.AppendLine("            string fields = string.Empty;");
            builder.AppendLine("            int qt = fields_Table.Count, i = 1;");
            builder.AppendLine("");
            builder.AppendLine("            foreach (MDN_Campo field in fields_Table)");
            builder.AppendLine("            {");
            builder.AppendLine("                fields += field.Name_Field;");
            builder.AppendLine("                if (i < qt)");
            builder.AppendLine("                    fields += \", \";");
            builder.AppendLine("                i++;");
            builder.AppendLine("            }");
            builder.AppendLine("            command += fields + \" FROM \" + this.Table_Name;");
            builder.AppendLine("            return command;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que valida se a tabela existe");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns></returns>");
            builder.AppendLine("        public bool ExistsTable()");
            builder.AppendLine("        {");
            builder.AppendLine("            return Util.DataBase.ExistsTable(this.Table_Name);");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que verifica se a coluna existe na tabela");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"coluna\"></param>");
            builder.AppendLine("        /// <returns>True - Existe; False - não existe</returns>");
            builder.AppendLine("        public bool ExisteColuna(string coluna)");
            builder.AppendLine("        {");
            builder.AppendLine("            if (!ExistsTable())");
            builder.AppendLine("                return false;");
            builder.AppendLine("");
            builder.AppendLine("            string sentenca = \"SELECT \" + coluna + \" FROM \" + this.Table_Name;");
            builder.AppendLine("            SQLiteDataReader reader = Util.DataBase.Select(sentenca);");
            builder.AppendLine("            if (reader == null)");
            builder.AppendLine("                return false;");
            builder.AppendLine("            reader.Close();");
            builder.AppendLine("            return true;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que cria a coluna");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"coluna\"></param>");
            builder.AppendLine("        /// <returns>True - criou; False - não criou</returns>");
            builder.AppendLine("        public bool CriaColuna(MDN_Campo coluna)");
            builder.AppendLine("        {");
            builder.AppendLine("            if (ExisteColuna(coluna.Name_Field))");
            builder.AppendLine("                return true;");
            builder.AppendLine("");
            builder.AppendLine("            string sentenca = \"ALTER TABLE \" + this.table_name + \" ADD \" + coluna.InsertFieldDataBase();");
            builder.AppendLine("            return Util.DataBase.Execute(sentenca);");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que verifica as colunas e cria se elas não existirem");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>True - Tudo correto; False - não conseguiu criar todas colunas</returns>");
            builder.AppendLine("        public bool VerificaColunas()");
            builder.AppendLine("        {");
            builder.AppendLine("            bool retorno = true;");
            builder.AppendLine("            foreach(MDN_Campo column in fields_Table)");
            builder.AppendLine("            {");
            builder.AppendLine("                if (!ExisteColuna(column.Name_Field))");
            builder.AppendLine("                {");
            builder.AppendLine("                    if (!CriaColuna(column))");
            builder.AppendLine("                    {");
            builder.AppendLine("                        retorno = false;");
            builder.AppendLine("                        break;");
            builder.AppendLine("                    }");
            builder.AppendLine("                }");
            builder.AppendLine("            }");
            builder.AppendLine("            return retorno;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que retorna todas as colunas separadas por vírgula");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns></returns>");
            builder.AppendLine("        public string TodosCampos()");
            builder.AppendLine("        {");
            builder.AppendLine("            string retorno = string.Empty;");
            builder.AppendLine("");
            builder.AppendLine("            int i = 0;");
            builder.AppendLine("            foreach (MDN_Campo field in fields_Table)");
            builder.AppendLine("            {");
            builder.AppendLine("                if (i > 0)");
            builder.AppendLine("                    retorno += \", \";");
            builder.AppendLine("                i++;");
            builder.AppendLine("");
            builder.AppendLine("                retorno += field.Name_Field;");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            return retorno;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        #endregion Methods ");
            builder.AppendLine("    }");
            builder.AppendLine("}");
        }

        /// <summary>
        /// Método que Preenche a partir da classe do núcleo do modelo
        /// </summary>
        /// <param name="builder">string para montar a classe</param>
        private static void PreencheMDNModel(ref StringBuilder builder)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.PreencheMDNModel()", Util.Global.TipoLog.DETALHADO);

            builder.AppendLine("using System;");
            builder.AppendLine("using System.Collections.Generic;");
            builder.AppendLine("using System.Data.SQLite;");
            builder.AppendLine("using System.Linq;");
            builder.AppendLine("using System.Text;");
            builder.AppendLine("using System.Threading.Tasks;");
            builder.AppendLine("");
            builder.AppendLine("namespace Model");
            builder.AppendLine("{");
            builder.AppendLine("    public abstract class MDN_Model");
            builder.AppendLine("    {");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Control if the class is empty");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public bool Empty = true;");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Class's control table ");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public MDN_Table table;");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Class's main constructor");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public MDN_Model()");
            builder.AppendLine("        {");
            builder.AppendLine("");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Abstract method to be implement on the heirs class");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>True - Sucess; False - Error</returns>");
            builder.AppendLine("        public abstract bool Insert();");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Abstract method to be implement on the heirs class");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>True - Sucess; False - Error</returns>");
            builder.AppendLine("        public abstract bool Update();");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Abstract method to be implement on the heirs class");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>True - Sucess; False - Error</returns>");
            builder.AppendLine("        public abstract bool Delete();");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Abstract method to be implement on the heirs class");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public abstract void Load();");
            builder.AppendLine("");
            builder.AppendLine("    }");
            builder.AppendLine("}");
        }

        #endregion Model

        #region Util

        /// <summary>
        /// Método que gera o útil
        /// </summary>
        /// <param name="info">diretorio onde copiar os arquivos</param>
        private static void GerarUtil(DirectoryInfo info)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.GerarUtil()", Util.Global.TipoLog.DETALHADO);

            StringBuilder utilCLFiles = new StringBuilder();
            PreencheCLFile(ref utilCLFiles);

            StringBuilder utilEnumerator = new StringBuilder();
            PreencheEnumerator(ref utilEnumerator);

            StringBuilder utilDataBase = new StringBuilder();
            PreencheDataBase(ref utilDataBase);

            StringBuilder utilGlobal = new StringBuilder();
            PreencheGlobal(ref utilGlobal);

            PreencheNoArquivo(info.FullName, utilCLFiles, utilEnumerator, utilDataBase, utilGlobal);
        }

        /// <summary>
        /// Método que preenche os arquivo
        /// </summary>
        /// <param name="CLFiles">string da classe cl_file</param>
        /// <param name="Enumerator">string da classe enumerator</param>
        /// <param name="DataBase">string da classe database</param>
        /// <param name="Global">string da classe global</param>
        private static void PreencheNoArquivo(string dir, StringBuilder CLFiles, StringBuilder Enumerator, StringBuilder DataBase, StringBuilder Global)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.PreencheNoArquivo()", Util.Global.TipoLog.DETALHADO);

            File.AppendAllText(dir + "\\" + Util.Global.app_claseCLFile_file, CLFiles.ToString());

            File.AppendAllText(dir + "\\" + Util.Global.app_claseEnumerator_file, Enumerator.ToString());

            File.AppendAllText(dir + "\\" + Util.Global.app_claseDataBase_file, DataBase.ToString());

            File.AppendAllText(dir + "\\" + Util.Global.app_claseGlobal_file, Global.ToString());
        }

        /// <summary>
        /// Método que preenche o arquivo de CLFile
        /// </summary>
        /// <param name="builder">string para montar a classe</param>
        private static void PreencheCLFile(ref StringBuilder builder)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.PreencheCLFile()", Util.Global.TipoLog.DETALHADO);

            builder.AppendLine("using System;");
            builder.AppendLine("using System.Collections.Generic;");
            builder.AppendLine("using System.IO;");
            builder.AppendLine("using System.Linq;");
            builder.AppendLine("using System.Text;");
            builder.AppendLine("");
            builder.AppendLine("namespace Util");
            builder.AppendLine("{");
            builder.AppendLine("    /// <summary>");
            builder.AppendLine("    /// Class to implement file's configuration ");
            builder.AppendLine("    /// </summary>");
            builder.AppendLine("    public class CL_Files");
            builder.AppendLine("    {");
            builder.AppendLine("        #region Atributes");
            builder.AppendLine("        StreamWriter writeFile = null;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// FileManager openned for writtring");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public StreamWriter WriteFile");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return this.writeFile;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// FileManager opened for reading");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        StreamReader fileRead = null;");
            builder.AppendLine("");
            builder.AppendLine("        public StreamReader FileRead");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return fileRead;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        string filesdir;");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Caminho do arquivo");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public string FilesDir");
            builder.AppendLine("        {");
            builder.AppendLine("            get");
            builder.AppendLine("            {");
            builder.AppendLine("                return filesdir;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        #endregion Atributes");
            builder.AppendLine("");
            builder.AppendLine("        #region Construtores");
            builder.AppendLine("");
            builder.AppendLine("        public CL_Files(string filedir)");
            builder.AppendLine("        {");
            builder.AppendLine("            this.filesdir = filedir;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        #endregion Construtores");
            builder.AppendLine("");
            builder.AppendLine("        #region Methods");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method how delete files");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"directory\">Directory from the archive that will be delete</param>");
            builder.AppendLine("        /// <returns>True - Sucess; False - Error</returns>");
            builder.AppendLine("        public static bool DeleteArchive(string directory)");
            builder.AppendLine("        {");
            builder.AppendLine("            if (Exists(directory))");
            builder.AppendLine("            {");
            builder.AppendLine("                try");
            builder.AppendLine("                {");
            builder.AppendLine("                    File.Delete(directory);");
            builder.AppendLine("                }");
            builder.AppendLine("                catch");
            builder.AppendLine("                {");
            builder.AppendLine("                    return false;");
            builder.AppendLine("                }");
            builder.AppendLine("");
            builder.AppendLine("            }");
            builder.AppendLine("            return true;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that write on the end of the file and put a line on the end");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"messagem\">Message to be writen</param>");
            builder.AppendLine("        public void WriteOnTheEndWithLine(string messagem)");
            builder.AppendLine("        {");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                File.AppendAllText(FilesDir, messagem + \"\n\");");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                Console.Out.WriteLine(\"Exception: \" + e.Message);");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that write on the end of the file and don't put a line on the end");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"messagem\">Message to be writen</param>");
            builder.AppendLine("        public void WriteOnTheEnd(string messagem)");
            builder.AppendLine("        {");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                File.AppendAllText(FilesDir, messagem);");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                Console.Out.WriteLine(\"Exception: \" + e.Message);");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method main directories of the system");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public static void DropMainDiretories()");
            builder.AppendLine("        {");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that create the main directories");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public static void CreateMainDirectories()");
            builder.AppendLine("        {");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method how copie the file A to the directorie B");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"from\">File to be copied</param>");
            builder.AppendLine("        /// <param name=\"to\">File of destiny</param>");
            builder.AppendLine("        /// <returns>True - Sucess; False - Fail</returns>");
            builder.AppendLine("        public static bool CopyFile(string from, string to)");
            builder.AppendLine("        {");
            builder.AppendLine("            if (!Exists(from))");
            builder.AppendLine("            {");
            builder.AppendLine("                return false;");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            File.Copy(from, to, true);");
            builder.AppendLine("            return true;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that replace the name of the file");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"arq\">File to be renamed</param>");
            builder.AppendLine("        /// <param name=\"newname\">New name of the file</param>");
            builder.AppendLine("        /// <returns>True - Sucess; False- Fail</returns>");
            builder.AppendLine("        public static bool Rename(string arq, string newname)");
            builder.AppendLine("        {");
            builder.AppendLine("            return CopyFile(arq, newname);");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that read the archive and returns a List of string with witch line");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"messageError\">String by references that put some possible error during the reader</param>");
            builder.AppendLine("        /// <returns>A list of strings os witch line in the archive</returns>");
            builder.AppendLine("        public List<string> ReadArchive()");
            builder.AppendLine("        {");
            builder.AppendLine("            List<string> linhas = new List<string>();");
            builder.AppendLine("");
            builder.AppendLine("            if (!Exists(FilesDir))");
            builder.AppendLine("            {");
            builder.AppendLine("                return null;");
            builder.AppendLine("            }");
            builder.AppendLine("            StreamReader reader = new StreamReader(filesdir);");
            builder.AppendLine("");
            builder.AppendLine("            while (!reader.EndOfStream)");
            builder.AppendLine("            {");
            builder.AppendLine("                try");
            builder.AppendLine("                {");
            builder.AppendLine("                    string linha = reader.ReadLine();");
            builder.AppendLine("                    linhas.Add(linha);");
            builder.AppendLine("                }");
            builder.AppendLine("                catch (Exception e)");
            builder.AppendLine("                {");
            builder.AppendLine("                    WriteOnTheLog(\"Error: \" + e.Message, Global.TipoLog.SIMPLES);");
            builder.AppendLine("                    return null;");
            builder.AppendLine("                }");
            builder.AppendLine("");
            builder.AppendLine("            }");
            builder.AppendLine("            reader.Close();");
            builder.AppendLine("            return linhas;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that verify the exists of the file");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"Directory\">directory of the file</param>");
            builder.AppendLine("        /// <returns>True - Exists; False - Don't exists</returns>");
            builder.AppendLine("        static public bool Exists(string Directory)");
            builder.AppendLine("        {");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                return System.IO.File.Exists(Directory);");
            builder.AppendLine("            }");
            builder.AppendLine("            catch");
            builder.AppendLine("            {");
            builder.AppendLine("                return true;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that write on the log");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"message\"></param>");
            builder.AppendLine("        public static void WriteOnTheLog(string message, Global.TipoLog tipoLog)");
            builder.AppendLine("        {");
            builder.AppendLine("            if(Global.log_system != Global.TipoLog.DETALHADO && tipoLog == Global.TipoLog.DETALHADO)");
            builder.AppendLine("            {");
            builder.AppendLine("                return;");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            string directory_ach = Global.app_logs_directoty;");
            builder.AppendLine("");
            builder.AppendLine("            if (DateTime.Now.Day < 10)");
            builder.AppendLine("            {");
            builder.AppendLine("                directory_ach += \"0\" + DateTime.Now.Day;");
            builder.AppendLine("            }");
            builder.AppendLine("            else");
            builder.AppendLine("            {");
            builder.AppendLine("                directory_ach += DateTime.Now.Day;");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            if (DateTime.Now.Month < 10)");
            builder.AppendLine("            {");
            builder.AppendLine("                directory_ach += \"0\" + DateTime.Now.Month;");
            builder.AppendLine("            }");
            builder.AppendLine("            else");
            builder.AppendLine("            {");
            builder.AppendLine("                directory_ach += DateTime.Now.Month;");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("");
            builder.AppendLine("            directory_ach += DateTime.Now.Year + \".log\";");
            builder.AppendLine("");
            builder.AppendLine("            CL_Files file = new CL_Files(directory_ach);");
            builder.AppendLine("            file.WriteOnTheEnd(DateTime.Now.ToString() + \"- \" + (tipoLog == Global.TipoLog.DETALHADO ? \"DETALHADO -\" : \"SIMPLES -\") + message + \"\n\");");
            builder.AppendLine("            file = null;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        #endregion Methods        ");
            builder.AppendLine("    }");
            builder.AppendLine("}");
        }

        /// <summary>
        /// Método que preenche a classe enumerator
        /// </summary>
        /// <param name="builder">string para montar a classe</param>
        private static void PreencheEnumerator(ref StringBuilder builder)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.PreencheEnumerator()", Util.Global.TipoLog.DETALHADO);

            builder.AppendLine("using System;");
            builder.AppendLine("using System.Collections.Generic;");
            builder.AppendLine("using System.Linq;");
            builder.AppendLine("using System.Text;");
            builder.AppendLine("using System.Threading.Tasks;");
            builder.AppendLine("");
            builder.AppendLine("namespace Util");
            builder.AppendLine("{");
            builder.AppendLine("    public class Enumerator");
            builder.AppendLine("    {");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Enum referente à tela a ser aberta");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public enum Telas");
            builder.AppendLine("        {");
            builder.AppendLine("            PRINCIPAL = 0");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Tarefa sendo executada na tela");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public enum Tarefa");
            builder.AppendLine("        {");
            builder.AppendLine("            INCLUINDO = 0,");
            builder.AppendLine("            EDITANDO = 1,");
            builder.AppendLine("            EXCLUINDO = 2,");
            builder.AppendLine("            VISUALIZANDO = 3");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Enumerator for type of data");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public enum DataType");
            builder.AppendLine("        {");
            builder.AppendLine("            DATE = 1,");
            builder.AppendLine("            INT = 2,");
            builder.AppendLine("            STRING = 3,");
            builder.AppendLine("            CHAR = 4,");
            builder.AppendLine("            DECIMAL");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        public enum Status");
            builder.AppendLine("        {");
            builder.AppendLine("            // Status desativado");
            builder.AppendLine("            DESATIVADO = 0,");
            builder.AppendLine("            // Status ativado");
            builder.AppendLine("            ATIVO = 1");
            builder.AppendLine("        }");
            builder.AppendLine("    }");
            builder.AppendLine("}");
        }

        /// <summary>
        /// Método que preenche a classe de DataBase
        /// </summary>
        /// <param name="builder"></param>
        private static void PreencheDataBase(ref StringBuilder builder)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.PreencheDataBase()", Util.Global.TipoLog.DETALHADO);

            builder.AppendLine("using System;");
            builder.AppendLine("using System.Collections.Generic;");
            builder.AppendLine("using System.Data;");
            builder.AppendLine("using System.Data.SQLite;");
            builder.AppendLine("using System.IO;");
            builder.AppendLine("using System.Linq;");
            builder.AppendLine("using System.Text;");
            builder.AppendLine("using System.Threading.Tasks;");
            builder.AppendLine("");
            builder.AppendLine("namespace Util");
            builder.AppendLine("{");
            builder.AppendLine("    class DataBase");
            builder.AppendLine("    {");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Checker is the connection is opened");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        private static bool is_open = false;");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Checker if the transaction is opened");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        private static bool is_in_transaction = false;");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Class of the connection with the data_base");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        private static SQLiteConnection m_dbConnection;");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Name of the data_base of tests");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        private static string name_table_test = \"TESTE\";");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that open the transaction with the data_base");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>True - Connection established; False - CAn't make the connection</returns>");
            builder.AppendLine("        public static bool OpenConnection(string directory_database = string.Empty)");
            builder.AppendLine("        {");
            builder.AppendLine("            if (is_open && !string.IsNullOrEmpty(directory_database))");
            builder.AppendLine("                return true;");
            builder.AppendLine("");
            builder.AppendLine("            if (string.IsNullOrEmpty(directory_database))");
            builder.AppendLine("                directory_database = Global.app_base_file;");
            builder.AppendLine("");
            builder.AppendLine("            // If the database don't exists it is create");
            builder.AppendLine("            if (!File.Exists(directory_database))");
            builder.AppendLine("            {");
            builder.AppendLine("                SQLiteConnection.CreateFile(directory_database);");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                m_dbConnection = new SQLiteConnection(\"Data Source=\" + directory_database + \";Version=3;\");");
            builder.AppendLine("                m_dbConnection.Open();");
            builder.AppendLine("                while (m_dbConnection.State == ConnectionState.Connecting);");
            builder.AppendLine("                is_open = true;");
            builder.AppendLine("                Util.CL_Files.WriteOnTheLog(\"Abrindo conexão. Banco: \" + directory_database, Global.TipoLog.SIMPLES);");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                Util.CL_Files.WriteOnTheLog(\"DataBase.OpenConnection. Erro: \" + e.Message, Global.TipoLog.SIMPLES);");
            builder.AppendLine("                is_open = false;");
            builder.AppendLine("            }");
            builder.AppendLine("            return is_open;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that close the connection with the database if it is open");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>True - Connection closed; False: Problem to close the connection</returns>");
            builder.AppendLine("        public static bool CloseConnection()");
            builder.AppendLine("        {");
            builder.AppendLine("            if (!is_open)");
            builder.AppendLine("            {");
            builder.AppendLine("                return true;");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                m_dbConnection.Close();");
            builder.AppendLine("                m_dbConnection.Dispose();");
            builder.AppendLine("                m_dbConnection = null;");
            builder.AppendLine("                is_open = false;");
            builder.AppendLine("");
            builder.AppendLine("                return true;");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                Util.CL_Files.WriteOnTheLog(\"DataBase.CloseConnection. Erro: \" + e.Message, Global.TipoLog.SIMPLES);");
            builder.AppendLine("                is_open = true;");
            builder.AppendLine("            }");
            builder.AppendLine("            return false;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that makes a select on the database");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"command_sql\">Command to be executed</param>");
            builder.AppendLine("        /// <returns>Returns a DataReader that provides the returns of consult</returns>");
            builder.AppendLine("        public static SQLiteDataReader Select(string command_sql)");
            builder.AppendLine("        {");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                if (!is_open)");
            builder.AppendLine("                {");
            builder.AppendLine("                    OpenConnection();");
            builder.AppendLine("                }");
            builder.AppendLine("");
            builder.AppendLine("                SQLiteCommand command = new SQLiteCommand(command_sql, m_dbConnection);");
            builder.AppendLine("                SQLiteDataReader reader = command.ExecuteReader();");
            builder.AppendLine("                return reader;");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                Util.CL_Files.WriteOnTheLog(\"Problem on the sentence. Sentence: \" + command_sql + \". Erro: \" + e.Message, Global.TipoLog.SIMPLES);");
            builder.AppendLine("                return null;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that execute a create table");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param command_sql=\"\">Command command_sql</param>");
            builder.AppendLine("        /// <returns>True - Sucess; False: Error</returns>");
            builder.AppendLine("        public static bool CreateTable(string command_sql)");
            builder.AppendLine("        {");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                return Execute(command_sql);");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                Util.CL_Files.WriteOnTheLog(\"Erro no create: \" + command_sql + \". Erro: \" + e.Message, Global.TipoLog.SIMPLES);");
            builder.AppendLine("                return false;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that provide the insert on the data_base");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"command_sql\">Command sql with the sentence</param>");
            builder.AppendLine("        /// <returns>True - Sucess; False: Error</returns>");
            builder.AppendLine("        public static bool Insert(string command_sql)");
            builder.AppendLine("        {");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                return Execute(command_sql);");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                Util.CL_Files.WriteOnTheLog(\"Erro no insert: \" + command_sql + \". Erro: \" + e.Message, Global.TipoLog.SIMPLES);");
            builder.AppendLine("                return false;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that makes a update on the data base");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"command\">Command sql</param>");
            builder.AppendLine("        /// <returns>True - Sucess; False: Error</returns>");
            builder.AppendLine("        public static bool Update(string command)");
            builder.AppendLine("        {");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                return Execute(command);");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                Util.CL_Files.WriteOnTheLog(\"Erro no update: \" + command + \". Erro: \" + e.Message, Global.TipoLog.SIMPLES);");
            builder.AppendLine("                return false;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that make the delete on data base");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"command\">Command sql</param>");
            builder.AppendLine("        /// <returns>True - Sucess; False: Error</returns>");
            builder.AppendLine("        public static bool Delete(string command)");
            builder.AppendLine("        {");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                return Execute(command);");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                Util.CL_Files.WriteOnTheLog(\"Erro no delete: \" + command + \". Erro: \" + e.Message, Global.TipoLog.SIMPLES);");
            builder.AppendLine("                return false;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that execute the sentence on the data base");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"command_sql\">Command</param>");
            builder.AppendLine("        /// <returns>True - Sucesso; False: erro</returns>");
            builder.AppendLine("        public static bool Execute(string command_sql)");
            builder.AppendLine("        {");
            builder.AppendLine("            if (!is_open)");
            builder.AppendLine("                OpenConnection();");
            builder.AppendLine("");
            builder.AppendLine("            SQLiteCommand command = new SQLiteCommand(command_sql, m_dbConnection);");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.AppendLine("                command.Transaction = m_dbConnection.BeginTransaction(System.Data.IsolationLevel.ReadCommitted);");
            builder.AppendLine("                command.Transaction.InitializeLifetimeService();");
            builder.AppendLine("                command.ExecuteNonQuery();");
            builder.AppendLine("                command.Transaction.Commit();");
            builder.AppendLine("                command.Dispose();");
            builder.AppendLine("");
            builder.AppendLine("                return true;");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (Exception e)");
            builder.AppendLine("            {");
            builder.AppendLine("                command.Transaction.Rollback();");
            builder.AppendLine("                Util.CL_Files.WriteOnTheLog(\"Erro no execute: \" + command_sql + \". Erro: \" + e.Message, Global.TipoLog.SIMPLES);");
            builder.AppendLine("                return false;");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        ///  Method that converts date to int");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"date\">Date to be converted</param>");
            builder.AppendLine("        /// <returns>Value integer that represents the date</returns>");
            builder.AppendLine("        public static int Date_to_Int(DateTime date)");
            builder.AppendLine("        {");
            builder.AppendLine("            string sentenca = \"SELECT strftime('%s','\" + date.Year + \"-\" + (date.Month < 10 ? \"0\" + date.Month : date.Month.ToString()) + \"-\" + (date.Day < 10 ? \"0\" + date.Day : date.Day.ToString()) + \" 00:00:00') \";");
            builder.AppendLine("            SQLiteDataReader reader = Select(sentenca);");
            builder.AppendLine("");
            builder.AppendLine("            int num_date = 0;");
            builder.AppendLine("            if (reader.Read())");
            builder.AppendLine("            {");
            builder.AppendLine("                num_date = int.Parse(reader[0].ToString());");
            builder.AppendLine("            }");
            builder.AppendLine("            reader.Close();");
            builder.AppendLine("            return num_date;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        ///  Method that converts the value integer to date");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"num_date\">Value integer to be converted</param>");
            builder.AppendLine("        /// <returns>Date</returns>");
            builder.AppendLine("        public static DateTime Int_to_Date(int num_date)");
            builder.AppendLine("        {");
            builder.AppendLine("            string sentenca = \"SELECT datetime(\" + num_date + \",'unixepoch') AS TESTE FROM \" + Tests_table();");
            builder.AppendLine("            SQLiteDataReader reader = Select(sentenca);");
            builder.AppendLine("");
            builder.AppendLine("            DateTime date = DateTime.Now;");
            builder.AppendLine("            if (reader.Read())");
            builder.AppendLine("            {");
            builder.AppendLine("                date = reader.GetDateTime(0);");
            builder.AppendLine("            }");
            builder.AppendLine("            reader.Close();");
            builder.AppendLine("");
            builder.AppendLine("            return date;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that returns the name of table of tests");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <returns>name of table</returns>");
            builder.AppendLine("        public static string Tests_table()");
            builder.AppendLine("        {");
            builder.AppendLine("            string sql = \"select 1 as TEST from \" + name_table_test;");
            builder.AppendLine("            SQLiteDataReader reader = Select(sql);");
            builder.AppendLine("");
            builder.AppendLine("            if (reader == null)");
            builder.AppendLine("            {");
            builder.AppendLine("                sql = \"CREATE TABLE \" + name_table_test + \"(IDTESTE INT)\";");
            builder.AppendLine("                CreateTable(sql);");
            builder.AppendLine("                sql = \"INSERT INTO \" + name_table_test + \" VALUES (1)\";");
            builder.AppendLine("                Insert(sql);");
            builder.AppendLine("            }");
            builder.AppendLine("            else");
            builder.AppendLine("                reader.Close();");
            builder.AppendLine("");
            builder.AppendLine("            return name_table_test;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Method that verify if the data base exists");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"table\">Name of the table</param>");
            builder.AppendLine("        /// <returns>True - exists; False - don't exists</returns>");
            builder.AppendLine("        public static bool ExistsTable(string table)");
            builder.AppendLine("        {");
            builder.AppendLine("            return Select(\"SELECT 1 FROM \" + table) != null;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que pega o incremental da tabela");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"table\"></param>");
            builder.AppendLine("        /// <returns></returns>");
            builder.AppendLine("        public static int GetIncrement(string table)");
            builder.AppendLine("        {");
            builder.AppendLine("            if (!ExistsTable(\"CODIGOS_TABLE\"))");
            builder.AppendLine("            {");
            builder.AppendLine("                CriaTabelaIncrementais();");
            builder.AppendLine("            }");
            builder.AppendLine("            AtualizaIncrementais();");
            builder.AppendLine("            string senteca = \"SELECT CODIGO FROM CODIGOS_TABLE WHERE TABELA = '\" + table + \"'\";");
            builder.AppendLine("            SQLiteDataReader reader = Select(senteca);");
            builder.AppendLine("            if (reader == null)");
            builder.AppendLine("                return -1;");
            builder.AppendLine("            else if (reader.Read())");
            builder.AppendLine("            {");
            builder.AppendLine("                int retorno = int.Parse(reader[\"CODIGO\"].ToString());");
            builder.AppendLine("                reader.Close();");
            builder.AppendLine("");
            builder.AppendLine("                senteca = \"UPDATE CODIGOS_TABLE SET CODIGO = CODIGO+1 WHERE TABELA = '\" + table + \"'\";");
            builder.AppendLine("                Update(senteca);");
            builder.AppendLine("");
            builder.AppendLine("                return retorno;");
            builder.AppendLine("            }");
            builder.AppendLine("            else");
            builder.AppendLine("                return -1;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que cria tabela de incrementais");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public static void CriaTabelaIncrementais()");
            builder.AppendLine("        {");
            builder.AppendLine("            string sentenca = \"CREATE TABLE CODIGOS_TABLE (TABELA VARCHAR(30) NOT NULL, CODIGO INT DEFAULT 0 NOT NULL, PRIMARY KEY(TABELA))\";");
            builder.AppendLine("            CreateTable(sentenca);");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que atualiza os incrementais");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public static void AtualizaIncrementais()");
            builder.AppendLine("        {");
            builder.AppendLine("            string sentenca = \"SELECT 1 FROM CODIGOS_TABLE WHERE TABELA = 'PROJETO'\";");
            builder.AppendLine("            if(!Select(sentenca).HasRows)");
            builder.AppendLine("            {");
            builder.AppendLine("                sentenca = \"INSERT INTO CODIGOS_TABLE (TABELA, CODIGO) VALUES ('PROJETO', 0)\";");
            builder.AppendLine("                Insert(sentenca);");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            sentenca = \"SELECT 1 FROM CODIGOS_TABLE WHERE TABELA = 'TABELA'\";");
            builder.AppendLine("            if (!Select(sentenca).HasRows)");
            builder.AppendLine("            {");
            builder.AppendLine("                sentenca = \"INSERT INTO CODIGOS_TABLE (TABELA, CODIGO) VALUES ('TABELA', 0)\";");
            builder.AppendLine("                Insert(sentenca);");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            sentenca = \"SELECT 1 FROM CODIGOS_TABLE WHERE TABELA = 'TIPOCAMPO'\";");
            builder.AppendLine("            if (!Select(sentenca).HasRows)");
            builder.AppendLine("            {");
            builder.AppendLine("                sentenca = \"INSERT INTO CODIGOS_TABLE (TABELA, CODIGO) VALUES ('TIPOCAMPO', 0)\";");
            builder.AppendLine("                Insert(sentenca);");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            sentenca = \"SELECT 1 FROM CODIGOS_TABLE WHERE TABELA = 'CAMPOS'\";");
            builder.AppendLine("            if (!Select(sentenca).HasRows)");
            builder.AppendLine("            {");
            builder.AppendLine("                sentenca = \"INSERT INTO CODIGOS_TABLE (TABELA, CODIGO) VALUES ('CAMPOS', 0)\";");
            builder.AppendLine("                Insert(sentenca);");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            sentenca = \"SELECT 1 FROM CODIGOS_TABLE WHERE TABELA = 'RELACAO'\";");
            builder.AppendLine("            if (!Select(sentenca).HasRows)");
            builder.AppendLine("            {");
            builder.AppendLine("                sentenca = \"INSERT INTO CODIGOS_TABLE (TABELA, CODIGO) VALUES ('RELACAO', 0)\";");
            builder.AppendLine("                Insert(sentenca);");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que retorna um data table a partir de um datareader");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        /// <param name=\"reader\"></param>");
            builder.AppendLine("        /// <returns></returns>");
            builder.AppendLine("        public static DataTable GetDataSourceFromDataReader(SQLiteDataReader reader)");
            builder.AppendLine("        {");
            builder.AppendLine("            DataTable dataTable = new DataTable();");
            builder.AppendLine("");
            builder.AppendLine("            if (reader != null)");
            builder.AppendLine("                dataTable.Load(reader);");
            builder.AppendLine("");
            builder.AppendLine("            return dataTable;");
            builder.AppendLine("        } ");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que pega o tipo de sistema");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public static Global.TipoLog GetLog()");
            builder.AppendLine("        {");
            builder.AppendLine("            Global.TipoLog tipo = Global.TipoLog.SIMPLES;");
            builder.AppendLine("");
            builder.AppendLine("            if (!ExistsTable(\"LOGG\"))");
            builder.AppendLine("            {");
            builder.AppendLine("                CreateTable(\"CREATE TABLE LOGG( TIPO_LOG CHAR(1) DEFAULT '0' NOT NULL, PRIMARY KEY(TIPO_LOG))\");");
            builder.AppendLine("            }");
            builder.AppendLine("            if(Select(\"SELECT 1 FROM LOGG\") != null)");
            builder.AppendLine("                if(!Select(\"SELECT 1 FROM LOGG\").Read())");
            builder.AppendLine("                {");
            builder.AppendLine("                    Insert(\"INSERT INTO LOGG (TIPO_LOG) VALUES ('0')\");");
            builder.AppendLine("                }");
            builder.AppendLine("");
            builder.AppendLine("            SQLiteDataReader reader = Select(\"SELECT TIPO_LOG FROM LOGG\");");
            builder.AppendLine("            reader.Read();");
            builder.AppendLine("            tipo = (reader[\"TIPO_LOG\"].ToString().Equals(\"0\") ? Global.TipoLog.SIMPLES : Global.TipoLog.DETALHADO);");
            builder.AppendLine("            reader.Close();");
            builder.AppendLine("");
            builder.AppendLine("            return tipo;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que pega a flag de automático");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public static Global.Automatico GetAutomatico()");
            builder.AppendLine("        {");
            builder.AppendLine("            Global.Automatico tipo = Global.Automatico.Automatico;");
            builder.AppendLine("");
            builder.AppendLine("            if (!ExistsTable(\"AUTOMATICO\"))");
            builder.AppendLine("            {");
            builder.AppendLine("                CreateTable(\"CREATE TABLE AUTOMATICO( AUTOMATICO CHAR(1) DEFAULT '0' NOT NULL, PRIMARY KEY(AUTOMATICO))\");");
            builder.AppendLine("            }");
            builder.AppendLine("            if (Select(\"SELECT 1 FROM AUTOMATICO\") != null)");
            builder.AppendLine("                if (!Select(\"SELECT 1 FROM AUTOMATICO\").Read())");
            builder.AppendLine("                {");
            builder.AppendLine("                    Insert(\"INSERT INTO AUTOMATICO (AUTOMATICO) VALUES ('0')\");");
            builder.AppendLine("                }");
            builder.AppendLine("");
            builder.AppendLine("            SQLiteDataReader reader = Select(\"SELECT AUTOMATICO FROM AUTOMATICO\");");
            builder.AppendLine("            reader.Read();");
            builder.AppendLine("            tipo = (reader[\"AUTOMATICO\"].ToString().Equals(\"0\") ? Global.Automatico.Automatico: Global.Automatico.Manual);");
            builder.AppendLine("            reader.Close();");
            builder.AppendLine("");
            builder.AppendLine("            return tipo;");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que seta o Log");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public static void SetLog(Global.TipoLog tipo)");
            builder.AppendLine("        {");
            builder.AppendLine("            if (!ExistsTable(\"LOGG\"))");
            builder.AppendLine("            {");
            builder.AppendLine("                CreateTable(\"CREATE TABLE LOGG( TIPO_LOG CHAR(1) DEFAULT '0' NOT NULL, PRIMARY KEY(TIPO_LOG))\");");
            builder.AppendLine("            }");
            builder.AppendLine("            if (!Select(\"SELECT 1 FROM LOGG\").Read())");
            builder.AppendLine("            {");
            builder.AppendLine("                Insert(\"INSERT INTO LOGG (TIPO_LOG) VALUES ('0')\");");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            Update(\"UPDATE LOGG SET TIPO_LOG = '\" + (tipo == Global.TipoLog.DETALHADO ? '1' : '0') + \"'\");");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Método que seta a flag de automático");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public static void SetAutomatico(Global.Automatico tipo)");
            builder.AppendLine("        {");
            builder.AppendLine("            if (!ExistsTable(\"LOGG\"))");
            builder.AppendLine("            {");
            builder.AppendLine("                CreateTable(\"CREATE TABLE AUTOMATICO( AUTOMATICO CHAR(1) DEFAULT '0' NOT NULL, PRIMARY KEY(AUTOMATICO))\");");
            builder.AppendLine("            }");
            builder.AppendLine("            if (!Select(\"SELECT 1 FROM AUTOMATICO\").Read())");
            builder.AppendLine("            {");
            builder.AppendLine("                Insert(\"INSERT INTO AUTOMATICO (AUTOMATICO) VALUES ('0')\");");
            builder.AppendLine("            }");
            builder.AppendLine("");
            builder.AppendLine("            Update(\"UPDATE AUTOMATICO SET AUTOMATICO = '\" + (tipo == Global.Automatico.Automatico ? '0' : '1') + \"'\");");
            builder.AppendLine("        }");
            builder.AppendLine("    }");
            builder.AppendLine("}");
        }


        /// <summary>
        /// Método que preenche a classe Global
        /// </summary>
        /// <param name="builder"></param>
        private static void PreencheGlobal(ref StringBuilder builder)
        {
            Util.CL_Files.WriteOnTheLog("UtilHelper.PreencheGlobal()", Util.Global.TipoLog.DETALHADO);

            builder.AppendLine("using System;");
            builder.AppendLine("using System.Collections.Generic;");
            builder.AppendLine("using System.IO;");
            builder.AppendLine("using System.Linq;");
            builder.AppendLine("using System.Text;");
            builder.AppendLine("using System.Threading.Tasks;");
            builder.AppendLine("");
            builder.AppendLine("namespace Util");
            builder.AppendLine("{");
            builder.AppendLine("    public static class Global");
            builder.AppendLine("    {");
            builder.AppendLine("        // Caminho principal da aplicação");
            builder.AppendLine("        public static string app_main_directoty = System.IO.Directory.GetCurrentDirectory() + \"\\\";");
            builder.AppendLine("");
            builder.AppendLine("        // Caminho da pasta de logs do sistema");
            builder.AppendLine("        public static string app_logs_directoty = app_main_directoty + \"Log\\\";");
            builder.AppendLine("");
            builder.AppendLine("        // Caminho da pasta de arquivos temporários");
            builder.AppendLine("        public static string app_temp_directory = app_main_directoty + \"TEMP\\\";");
            builder.AppendLine("");
            builder.AppendLine("        // Nome do diretório de saída");
            builder.AppendLine("        public static string app_out_directory = app_main_directoty + \"OUT\\\";");
            builder.AppendLine("");
            builder.AppendLine("        // Nome do diretório do banco de dados");
            builder.AppendLine("        public static string app_base_directory = app_main_directoty + \"BASE\\\";");
            builder.AppendLine("");
            builder.AppendLine("        // Nome do diretório do DER");
            builder.AppendLine("        public static string app_DER_directory = app_main_directoty + \"DER\\\";");
            builder.AppendLine("        ");
            builder.AppendLine("        // Nome do diretório do Img do html");
            builder.AppendLine("        public static string app_Img_directory = app_main_directoty + \"Img\\\";");
            builder.AppendLine("");
            builder.AppendLine("        // Nome do arquivo sqlite de configuração");
            builder.AppendLine("        public static string app_base_file = app_base_directory + \"pckdb.db3\";");
            builder.AppendLine("        ");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Enumerador referente ao tipo de log que o sistema irá persistir");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public enum TipoLog");
            builder.AppendLine("        {");
            builder.AppendLine("            DETALHADO = 0,");
            builder.AppendLine("            SIMPLES = 1");
            builder.AppendLine("        }");
            builder.AppendLine("");
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Tipo mde log que o sistema está utilizando");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine("        public static TipoLog log_system = TipoLog.SIMPLES;");
            builder.AppendLine("}");

        }

        #endregion Util
    }
}
